BLOCK OUTLINE
https://github.com/Tfarcenim/DropOff/blob/1.15.x/src/main/java/scp002/quickstack/client/ClientUtils.java#L63

    @SubscribeEvent
    public static void eyeOfGreedRenderChest(RenderWorldLastEvent event) {
        Minecraft mc = Minecraft.getInstance();
        if (mc.world != null && mc.player != null) {
            for (int i = 0; i < mc.world.loadedTileEntityList.size(); ++i) {
                if (mc.world.loadedTileEntityList.get(i) instanceof ChestTileEntity) {
                    ChestTileEntity chest = (ChestTileEntity) mc.world.loadedTileEntityList.get(i);
                    drawBoundingBox(chest.getPos(), event.getMatrixStack());
                }
            }
        }
    }

    public static void drawBoundingBox(BlockPos pos, MatrixStack matrixStack) {
        Vec3d vec3d = TileEntityRendererDispatcher.instance.renderInfo.getProjectedView();

        MatrixStack stack = matrixStack;
        stack.translate(-vec3d.x, -vec3d.y, -vec3d.z);

        RenderSystem.pushMatrix();
        RenderSystem.multMatrix(stack.getLast().getMatrix());

        Tessellator tessellator = Tessellator.getInstance();
        BufferBuilder buffer = tessellator.getBuffer();
        RenderSystem.disableTexture();
        RenderSystem.disableDepthTest();
        RenderSystem.depthMask(false);
        RenderSystem.polygonMode(1032, 6913);
        RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
        RenderSystem.enableBlend();
        RenderSystem.lineWidth(2);

        buffer.begin(1, DefaultVertexFormats.POSITION_COLOR);
        renderBlockBounding(buffer, pos, 128, 1);
        tessellator.draw();

        RenderSystem.polygonMode(1032, 6914);
        RenderSystem.disableBlend();
        RenderSystem.enableDepthTest();
        RenderSystem.depthMask(true);
        RenderSystem.enableTexture();

        RenderSystem.popMatrix();
    }

    private static void renderBlockBounding(BufferBuilder buffer, BlockPos pos, int color, int opacity) {

        final float size = 1.0f;

        float red = (color >> 16 & 0xff) / 255f;
        float green = (color >> 8 & 0xff) / 255f;
        float blue = (color & 0xff) / 255f;


        int x = pos.getX();
        int y = pos.getY();
        int z = pos.getZ();

        // TOP
        buffer.pos(x, y + size, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y + size, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y + size, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y + size, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y + size, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y + size, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y + size, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y + size, z).color(red, green, blue, opacity).endVertex();

        // BOTTOM
        buffer.pos(x + size, y, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y, z).color(red, green, blue, opacity).endVertex();

        // Edge 1
        buffer.pos(x + size, y, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y + size, z + size).color(red, green, blue, opacity).endVertex();

        // Edge 2
        buffer.pos(x + size, y, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x + size, y + size, z).color(red, green, blue, opacity).endVertex();

        // Edge 3
        buffer.pos(x, y, z + size).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y + size, z + size).color(red, green, blue, opacity).endVertex();

        // Edge 4
        buffer.pos(x, y, z).color(red, green, blue, opacity).endVertex();
        buffer.pos(x, y + size, z).color(red, green, blue, opacity).endVertex();
    }



CLARITY


    @SubscribeEvent
    public static void clarityEnchantmentFog(FogDensity event) {
        Minecraft mc = Minecraft.getInstance();
        if (mc.player == null)
            return;

        if (!isSpyglassActive(mc.player))
            return;

        if (!mc.player.areEyesInFluid(FluidTags.LAVA, true))
            return;

        if (!EnchantmentHelper.getEnchantments(mc.player.getActiveItemStack()).equals(EnchantmentInit.MAGNIFY.get()))
            return;

        event.setDensity(0.025f);
        event.setCanceled(true);
    }